{% extends "base.html.j2" %}

{% block title %}Граматика продукцій{% endblock %}

{% block headimports %}
	<link rel="stylesheet" type="text/css" href="css/main.css">
	<link rel="stylesheet" type="text/css" href="css/tree.css">
{% endblock %}

{% block content %}
	<div class="search_top">
		<input type="text" placeholder="Введіть речення" id="search_input" class="fullwide"></input>
		<button onclick="search()">Аналізувати</button>
	</div>
	<div id="search_results">
		<div id="arrows"></div>
		<div id="tree"></div>
	</div>
	</div>
{% endblock %}

{% block endbody %}
	<script type="text/javascript" src="js/api.js"></script>
	<script type="text/javascript" src="js/blocks.js"></script>
	<script type="text/javascript" src="js/treeParser.js"></script>
	<script type="text/javascript" src="js/localization.js"></script>
	<script type="text/javascript" src="js/main.js"></script>
	<script type="text/javascript">
		const tree_container = $("tree");
		const search_results = $("search_results");
		const search_input = $("search_input");
		const sentence_tagging = $("sentence_tagging");
		const arrows = $("arrows");

		const search = () => API.send(
			"GET",
			`sentence/gramtree/${encodeURIComponent(search_input.value)}`,
			drawTree.bind(null, search_input.value)
		);

		const drawTree = (sentence, data) => {

			tree_container.clear();

			const tree = new TreeParser(data);

			let levels = [];
			let connections = [];

			const addToLevels = (vertex, level) => {
				if(levels.length < level)
					levels.push([]);

				levels[level - 1].push(vertex);

				if(!vertex.hasOwnProperty("linksTo"))
					return null;
				
				for(let child of vertex.linksTo){
					addToLevels(
						tree.getById(child), level + 1);
					connections.push([vertex.id, child]);
				}
			}

			addToLevels(
				tree.getById(tree.rootId), 1);

			levels.reverse();

			// adding levels
			for(let i=0; i<levels.length; i++){

				const row_num = levels.length - i;

				tree_container.apply(Blocks.TreeRow)
					.toOneFrom({
						n: row_num
					});

				let counter = 0;

				// adding words on level
				for(let token of levels[i]){
					$(`row${row_num}`).apply(Blocks.TreeEntity)
						.toOneFrom({
							word: token.hasOwnProperty("word")
									? token.word
									: token.tag,
							n: token.id,
							left: counter * 100,
							morph: token.hasOwnProperty("morph")
									? token.morph
									: {}
						});
					counter += 1;
				}

			}

			for(let [from, to] of connections)
				$(`word${from}`).pointerTo(
					$(`word${to}`));

		}

		search_input.runOnEnter(search);
	</script>
{% endblock %}
